package gwik.main;

import com.sun.xml.internal.fastinfoset.util.CharArray;
import gwik.osm.*;
import net.sf.xfresh.core.InternalRequest;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;


/**
 * @author: Vladislav Dolbilov (darl@yandex-team.ru)
 * Date: 01.11.11 23:34
 */
public class OsmQueryYalet extends AbstractJsonYalet {
    private static final Logger log = Logger.getLogger(OsmQueryYalet.class);

    private static final String API_URL = "http://www.overpass-api.de/api/xapi?*[bbox=%s][wikipedia=*]";
    private static final String IMAGES_API_URL = "http://ru.wikipedia.org/w/api.php?action=query&titles=%s&prop=images&format=xml";
    private static final String IMAGE_INFO_API_URL = "http://ru.wikipedia.org/w/api.php?action=query&titles=%s&prop=imageinfo&iiprop=url&format=xml";

    @Override
    protected Object process(InternalRequest req) throws JSONException {
        final String bbox = req.getParameter("bbox");
        log.info("bbox: " + bbox);

        log.debug("Start requesting overpass api");
        final String url = String.format(API_URL, bbox);
        log.debug("url = " + url);
        List<ImagedWikiObject> res = convertToImagedWiki( new OsmResponseParser().parse(url) );

        ImagesXmlParser imParser = new ImagesXmlParser();
        ImageInfoParser iiParser = new ImageInfoParser();

        for (int wikiObj=0; wikiObj<res.size(); ++wikiObj){
            //Получаем название файла, соответсвующего одной из картинок статьи
            String articleName = res.get(wikiObj).getTitle().replaceAll(" ", "%20");
            String imagesApiUrl = String.format(IMAGES_API_URL, articleName);
            String imageName = imParser.parse( imagesApiUrl ).replaceAll( " ", "%20" );

            if ( !imageName.equals("error") ){
                //по имени файла, получаем ссылку на картинку
                String iiApiUrl = String.format( IMAGE_INFO_API_URL, imageName );
                iiParser.parse( iiApiUrl, res.get(wikiObj) );
            }
        }

        log.debug("found:" + res);

        return new JSONObject().put("result", res);
    }

    private List<ImagedWikiObject> convertToImagedWiki( List<WikiObject> src){
        List<ImagedWikiObject> res = new ArrayList<ImagedWikiObject>();
        for (int i=0; i<src.size(); ++i){
            res.add( new ImagedWikiObject( src.get(i)) );
        }

        src.clear();
        return res;
    }

}
